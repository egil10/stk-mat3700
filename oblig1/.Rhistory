labs(title = "Vektorlistene B og C i R^2",
x = "x", y = "y") +
theme_minimal() +
theme(legend.title = element_blank())
# Plot med ggplot2
ggplot() +
geom_hline(yintercept = 0, color = "grey70") +
geom_vline(xintercept = 0, color = "grey70") +
geom_segment(data = vectors,
aes(x = 0, y = 0, xend = x, yend = y, color = group),
arrow = arrow(length = unit(0.2, "cm")),
linewidth = 1.2) +
coord_fixed(ratio = 1, xlim = c(-1.2, 1.2), ylim = c(-1.2, 1.2)) +
theme_minimal() +
theme(legend.title = element_blank())
setwd("C:/Users/ofurn/Dokumenter/Github/stk-mat3700/oblig1")
library(tidyverse)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
library(readr)
df <- read_csv("data/finance_data.csv")
df
df <- read.csv("data/finance_data.csv", ";")
df <- read_excel("data/finance_data.csv")
df <- read_csv("data/finance_data.csv")
df
df <- read_delim("data/finance_data.csv",
delim = ";")
df
df <- read_delim("data/finance_data.csv",
delim = ";")
df
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ","))
df
df %>%
rename("Trading day" = `Trading day`)
df %>%
rename(Trading day = `Trading day`)
df %>%
rename("Trading day" = `Trading day`)
df %>%
rename("Trading_day" = `Trading day`)
df %>%
rename("Trading-day" = `Trading day`)
df %>%
rename("Trading_day" = `Trading day`)
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename("Trading_day" = `Trading day`)
df
df %>%
arrange(Trading_day) %>%
mutate(across(Energy:SoftDrink,
~ log(.x/lag(.x)),
.names = "{.col}_ret"))
df %>%
arrange(Trading_day) %>%
mutate(across(Energy:SoftDrink,
~ log(.x/lag(.x)),
.names = "{.col}_ret")) %>%
summarise(across(everything(),
list(mean=mean,
sd=sd),
ma.rm=TRUE)) %>%
pivot_longer(cols = everything(),
names_to = c("Asset",".value"),
names_sep = "_ret_")
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename("Trading_day" = `Trading day`)
df
df %>%
mutate(r1 = Trading_day/lag(Trading_day))
df %>%
mutate(r1 = Trading_day/lag(Trading_day)/100)
df %>%
mutate(r1 = Trading_day/lag(Trading_day)/100,
r2 = Energy/lag(Energy)/100)
setwd("C:/Users/ofurn/Dokumenter/Github/stk-mat3700/oblig1")
cls
library(tidyverse)
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename("Trading_day" = `Trading day`)
# a)
library(tidyverse)
library(ggplot2)
# --- Load data ---
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename("Trading_day" = `Trading day`)
# Convert to long format (assumes columns: Trading_day + 5 assets)
df_long <- df %>%
pivot_longer(-Trading_day, names_to = "Asset", values_to = "Price")
# --- Compute daily log returns ---
returns <- df_long %>%
group_by(Asset) %>%
arrange(Trading_day) %>%
mutate(Return = log(Price/lag(Price))) %>%
drop_na()
# --- Summary statistics: expected return and volatility ---
summary_stats <- returns %>%
group_by(Asset) %>%
summarise(Expected_Return = mean(Return),
Volatility = sd(Return))
print(summary_stats)
# --- Plot empirical vs. fitted normal ---
plots <- returns %>%
group_by(Asset) %>%
do({
mu <- mean(.$Return)
sigma <- sd(.$Return)
ggplot(., aes(x = Return)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma),
color = "red", size = 1) +
labs(title = paste("Empirical vs Normal Fit -", unique(.$Asset)),
x = "Return", y = "Density") +
theme_minimal()
})
# Display all plots
plots
library(tidyverse)
# --- Load & tidy ---
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(Trading_day = `Trading day`)
df_long <- df %>%
pivot_longer(-Trading_day, names_to = "Asset", values_to = "Price")
# --- Daily log returns ---
returns <- df_long %>%
group_by(Asset) %>%
arrange(Trading_day, .by_group = TRUE) %>%
mutate(Return = log(Price/lag(Price))) %>%
drop_na()
# --- Summary stats (daily) ---
summary_stats <- returns %>%
summarise(Expected_Return = mean(Return),
Volatility      = sd(Return)) %>%
arrange(Asset)
summary_stats
# If you also want annualized estimates:
annual_stats <- summary_stats %>%
mutate(Expected_Return_ann = Expected_Return * 252,
Volatility_ann      = Volatility * sqrt(252))
annual_stats
# --- Build normal densities per-asset to overlay ---
norm_overlay <- returns %>%
group_by(Asset) %>%
summarise(mu = mean(Return), sigma = sd(Return),
xmin = min(Return), xmax = max(Return), .groups = "drop") %>%
rowwise() %>%
mutate(x = list(seq(xmin, xmax, length.out = 400))) %>%
unnest(x) %>%
mutate(y = dnorm(x, mean = mu, sd = sigma))
# --- Faceted plot: empirical vs fitted normal ---
ggplot(returns, aes(x = Return)) +
geom_histogram(aes(y = ..density..), bins = 30, alpha = 0.6) +
geom_line(data = norm_overlay, aes(x = x, y = y), linewidth = 1, color = "red") +
facet_wrap(~ Asset, scales = "free") +
labs(title = "Empirical Return Distributions with Fitted Normal",
x = "Daily log return", y = "Density") +
theme_minimal()
library(tidyverse)
library(glue)
library(scales)
# --- Load & tidy ---
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(Trading_day = `Trading day`)
prices_long <- df %>%
pivot_longer(-Trading_day, names_to = "Asset", values_to = "Price")
# --- Daily log returns ---
returns <- prices_long %>%
group_by(Asset) %>%
arrange(Trading_day, .by_group = TRUE) %>%
mutate(Return = log(Price/lag(Price))) %>%
drop_na()
# --- Stats (daily + annualized) ---
stats <- returns %>%
summarise(mu = mean(Return),
sigma = sd(Return),
mu_ann = mu * 252,
sigma_ann = sigma * sqrt(252)) %>%
mutate(label = glue("μ = {percent(mu, accuracy = 0.01)}  (ann {percent(mu_ann, accuracy = 0.1)})
σ = {percent(sigma, accuracy = 0.01)}  (ann {percent(sigma_ann, accuracy = 0.1)})"))
# Pre-compute smooth normal overlays per asset
norm_overlay <- returns %>%
group_by(Asset) %>%
summarise(mu = mean(Return), sigma = sd(Return),
xmin = min(Return), xmax = max(Return), .groups = "drop") %>%
rowwise() %>%
mutate(x = list(seq(xmin, xmax, length.out = 400))) %>%
unnest(x) %>%
mutate(dens = dnorm(x, mean = mu, sd = sigma))
# --- FT/Economist-ish theme helper ---
theme_ft <- function(base_size = 12, base_family = NULL) {
theme_minimal(base_size = base_size, base_family = base_family) +
theme(
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold"),
panel.grid.major.y = element_line(colour = "#d0d0d0"),
panel.grid.major.x = element_line(colour = "#efefef"),
panel.grid.minor = element_blank(),
strip.placement = "outside",
strip.text = element_text(face = "bold"),
axis.ticks = element_blank()
)
}
# --- Plot ---
p <- ggplot(returns, aes(x = Return)) +
# histogram (neutral fill)
geom_histogram(aes(y = ..density..), bins = 30, fill = "#cfd8dc", alpha = 0.9, colour = NA) +
# fitted normal
geom_line(data = norm_overlay, aes(x = x, y = dens), linewidth = 1, colour = "#c0392b") +
# vertical mean line
geom_vline(data = stats, aes(xintercept = mu), linewidth = 0.6, linetype = "solid", colour = "#37474f") +
# corner labels: μ & σ (daily + annualized)
geom_text(data = stats,
aes(x = Inf, y = Inf, label = label),
hjust = 1.02, vjust = 1.3, size = 3.3, lineheight = 1.1, colour = "#37474f") +
facet_wrap(~ Asset, scales = "free", ncol = 3) +
labs(
title = "Daily Return Distributions with Fitted Normal",
subtitle = "Histogram of daily log returns; red curve is Normal(μ, σ). Labels show daily and annualized μ and σ.",
x = "Daily log return",
y = "Density",
caption = "Source: course data; author’s calculations"
) +
theme_ft()
p
# Save a crisp PDF for Overleaf
dir.create("plots", showWarnings = FALSE)
ggsave("plots/returns_normal_panels.pdf", p, width = 10.5, height = 7.5, device = cairo_pdf)
library(tidyverse)
library(scales)
# ----- Data & returns -----
df <- read_delim("data/finance_data.csv", delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(Trading_day = `Trading day`)
returns <- df %>%
pivot_longer(-Trading_day, names_to = "Asset", values_to = "Price") %>%
group_by(Asset) %>%
arrange(Trading_day, .by_group = TRUE) %>%
mutate(Return = log(Price/lag(Price))) %>%
drop_na()
# ----- Minimal theme -----
theme_min_fin <- function(base_size = 12) {
theme_minimal(base_size = base_size) +
theme(
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title.x = element_text(margin = margin(t = 6)),
axis.title.y = element_text(margin = margin(r = 6)),
axis.ticks = element_blank()
)
}
# ----- Palette (muted, cohesive) -----
pal <- c(
"Energy"    = "#2A6F97",  # deep muted blue
"Agro"      = "#7A8B3A",  # olive
"Tech"      = "#5C5D8D",  # desaturated indigo
"Pharma"    = "#8C6E5D",  # warm taupe
"SoftDrink" = "#8AA6A3"   # muted teal
)
# Ensure all assets have a color (fallback if names differ)
unique_assets <- unique(returns$Asset)
fallback_cols <- hue_pal(l = 35, c = 80)(length(unique_assets))
col_map <- setNames(pal[unique_assets], unique_assets)
col_map[is.na(col_map)] <- fallback_cols[is.na(col_map)]
# ----- Plotting function: one PDF per asset -----
plot_one_asset <- function(dd, asset_name, out_dir = "plots") {
d <- dd %>% filter(Asset == asset_name)
mu <- mean(d$Return); sig <- sd(d$Return)
# smooth normal overlay range
xs <- seq(min(d$Return), max(d$Return), length.out = 400)
dens <- dnorm(xs, mu, sig)
p <- ggplot(d, aes(x = Return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = alpha(col_map[[asset_name]], 0.35), color = NA) +
geom_line(aes(x = xs, y = dens), linewidth = 0.9,
color = col_map[[asset_name]]) +
geom_vline(xintercept = mu, linewidth = 0.5, linetype = "solid",
color = "#6b6b6b") +
labs(
title = asset_name,
subtitle = paste0("Empirical daily log returns with fitted Normal(μ,σ)"),
x = "Daily log return",
y = "Density",
caption = paste0(
"μ = ", percent(mu, accuracy = 0.01),
"  (ann ", percent(mu*252, accuracy = 0.1), ");  ",
"σ = ", percent(sig, accuracy = 0.01),
"  (ann ", percent(sig*sqrt(252), accuracy = 0.1), ")"
)
) +
theme_min_fin()
dir.create(out_dir, showWarnings = FALSE)
ggsave(
filename = file.path(out_dir, paste0("returns_", asset_name, ".pdf")),
plot = p, width = 6.5, height = 4.6, device = cairo_pdf
)
invisible(p)
}
# ----- Generate all PDFs -----
walk(unique_assets, ~plot_one_asset(returns, .x))
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(trading_day = `Trading day`)
df
returns <- df %>%
pivot_longer(-trading_day,
names_to = "asset",
values_to = "price") %>%
group_by(asset) %>%
arrange(trading_day,
.by_group = TRUE) %>%
mutate(return = log(price/lag(price))) %>%
drop_na()
returns
returns %>%
ggplot(aes(x = return)) %>%
geom_histogram(aes(y = ..density..), bins = 30)
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30)
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30)
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30) +
geom_line(aes(x = xs, y = dens))
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30)
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "grey80", color = "white") +
geom_density(color = "red") +
facet_wrap(~ asset, scales = "free") +
theme_minimal()
# problem 1
# a) ----------------------------------------------------------------------
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(trading_day = `Trading day`)
returns <- df %>%
pivot_longer(-trading_day,
names_to = "asset",
values_to = "price") %>%
group_by(asset) %>%
arrange(trading_day,
.by_group = TRUE) %>%
mutate(return = log(price/lag(price))) %>%
drop_na()
stats <- returns %>%
group_by(asset) %>%
summarise(mu = mean(return),
sigma = sd(return))
returns %>%
ggplot(aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "grey80", color = "white") +
stat_function(data = stats,
fun = dnorm,
args = list(mean = stats$mu[1], sd = stats$sigma[1])) # but need per facet
library(tidyverse)
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(trading_day = `Trading day`)
returns <- df %>%
pivot_longer(-trading_day,
names_to = "asset",
values_to = "price") %>%
group_by(asset) %>%
arrange(trading_day, .by_group = TRUE) %>%
mutate(return = log(price/lag(price))) %>%
drop_na()
# estimate mu and sigma for each asset
stats <- returns %>%
group_by(asset) %>%
summarise(mu = mean(return),
sigma = sd(return))
# build fitted normal curves per asset
overlay <- stats %>%
rowwise() %>%
mutate(x = list(seq(min(returns$return), max(returns$return), length.out = 400)),
y = list(dnorm(x, mean = mu, sd = sigma))) %>%
unnest(c(x, y))
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "red", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_minimal()
# problem 1
library(tidyverse)
# a) ----------------------------------------------------------------------
df <- read_delim("data/finance_data.csv",
delim = ";",
locale = locale(decimal_mark = ",")) %>%
rename(trading_day = `Trading day`)
returns <- df %>%
pivot_longer(-trading_day,
names_to = "asset",
values_to = "price") %>%
group_by(asset) %>%
arrange(trading_day, .by_group = TRUE) %>%
mutate(return = log(price/lag(price))) %>%
drop_na()
# estimate mu and sigma for each asset
stats <- returns %>%
group_by(asset) %>%
summarise(mu = mean(return),
sigma = sd(return))
# build fitted normal curves per asset
overlay <- stats %>%
rowwise() %>%
mutate(x = list(seq(min(returns$return), max(returns$return), length.out = 400)),
y = list(dnorm(x, mean = mu, sd = sigma))) %>%
unnest(c(x, y))
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "red", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_minimal()
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "red", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_grey()
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "blue", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_grey()
# summary statistics: daily mean and volatility
stats <- returns %>%
group_by(asset) %>%
summarise(mu = mean(return),
sigma = sd(return)) %>%
mutate(mu_ann = mu * 252,
sigma_ann = sigma * sqrt(252))
print(stats)
axis.text = element_text(color = "g_
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "#cfd8dc", color = "white") +
geom_line(data = overlay, aes(x = x, y = y),
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "blue", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_void()
# plot: histogram (empirical) + fitted normal
ggplot(returns, aes(x = return)) +
geom_histogram(aes(y = ..density..), bins = 30,
fill = "grey80", color = "white") +
geom_line(data = overlay, aes(x = x, y = y), color = "blue", linewidth = 0.8) +
facet_wrap(~ asset, scales = "free") +
theme_bw()
library(tidyverse)
library(ggcorrplot)
# wide matrix of returns
Rmat <- returns %>%
select(trading_day, asset, return) %>%
pivot_wider(names_from = asset, values_from = return) %>%
select(-trading_day)
# correlation and covariance matrices
cor_mat <- cor(Rmat, use = "pairwise.complete.obs")
cov_mat <- cov(Rmat, use = "pairwise.complete.obs")
print("Correlation matrix:")
print(round(cor_mat, 3))
print("Covariance matrix:")
print(round(cov_mat, 6))
# --- Plot correlation heatmap (Economist-like styling) ---
p <- ggcorrplot(cor_mat,
lab = TRUE, lab_size = 3,
colors = c("#cfd8dc", "#0072B2", "#d32f2f"), # grey–blue–red
outline.col = "white") +
labs(title = "Correlation between asset returns") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
print(p)
# save
dir.create("plots", showWarnings = FALSE)
ggsave("plots/correlations.pdf", p, width = 6, height = 5, device = cairo_pdf)
